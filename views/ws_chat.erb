<div id="content"></div>
<hr>

  <!-- <div id="msgs"></div> -->
  <h3>Hello <strong><%= @user %></strong>! Welcome to Websockets.</h3>
  <%= @current_ws_users %>
  <div id="dump"></div>

  <hr>

  <form>
      <label for="message">MESSAGE: </label>
      <input type="text" id="input" name="message" placeholder="send a message"></input>
      <input id="send_message" class="btn btn-sm btn-primary" type="submit">
      <hr>
  </form>

  <a href='/'>Go Back to Home</a>
<script>
var userName = '<%= @user %>';
// $(document).ready(function(){

  var re = /https|http/,
      protocol = re.exec(window.location.protocol),
      wsProtocol = protocol[0] === 'https:' ? 'wss://' : 'ws://' ;

  // WEBSOCKET
  var ws = new WebSocket(wsProtocol + window.location.host + window.location.pathname);
  ws.onopen    = function()  { $('#msgs').html('CHAT-STATUS: websocket opened'); }
  ws.onclose   = function()  { $('#msgs').html('CHAT-STATUS: websocket closed'); }
  ws.onmessage = function(data) {
      var array = data.data.split(',')
      var row = {date: array[0], user: array[1], message: array[2], color: array[3]}
      console.log(row)

      if ( row.user === "STATUS") {
        $('#dump > ul > li:last-child').after(createLI(row, '#FF4000'));
      } else {
        $('#dump > ul > li:last-child').after(createLI(row, "green"));
      }
      console.log('on message run...')
      // autoScroll();
  };

  // Read CSV File first and Setup
  readAndDisplayFromCSV();

  // Setup
  $('#message').focus();
  $('#message').select();

  // Send Message Functions
  $('#message').keypress(function (e) {
    if (e.which == 13) {
      checkInput();
      return false;
    }
  });

  $("#send_message").click(function(){
    checkInput();
    return false;
  });

  function checkInput(){
    var input = $('#input').val();
    if (input.length > 0){
      postAndUpdate(input);
        $('#input').val('');
      } else {
        alert("Please Enter a message!")
      }
  }

  function readAndDisplayFromCSV() {
    $.ajax({
      url: '/messages/websockets',
      dataType: 'json',
    }).done(function(data){
      createList(data);
      // autoScroll();
    })
  };

  function createList(data){
    var allRows = data;
    var list = '<ul id="msgs" class="chat-window list-group">';
    for (var i = 0; i < allRows.length; i++){
      var row = allRows[i]

      if ( row.user === "STATUS") {
        list += createLI(row, '#D3D3D3')
      } else {
        list += createLI(row, 'green')
      }
    }

    list += '</ul>'

    $('#dump').append(list)
  }

  function createLI(row, style){
    var date = new Date(row.date).toString().split('GMT');

    return '<li style="background-color:' + row.color + '">' + date[0] + ' | ' + row.user + ' : ' + row.message + '</li>'
  }

  function autoScroll(){
    $("ul#msgs").animate({ scrollTop: $("ul#msgs")[0].scrollHeight }, "slow");
  }

  function postAndUpdate(text) {
    var user = "<%= @user %>"
    var data = {date: Date(), user: user, message: text, color: "<%= @user_color %>"}

    console.log('STATUS=> triggering sockets...')
    ws.send([data.date,data.user,data.message,data.color].join(','));
  }

  // PING - Keeps Websocket Alive - 60sec
  setInterval(function(){
    console.log('ping')
    ws.send('ping,ping,ping,ping');
  }, 60000)

// });
</script>

<!-- ------------------------------------------ -->
<!-- REACT COMPONENTS -->
<!-- ------------------------------------------ -->
<script type="text/babel">
  var ChatLine = React.createClass({
    render: function() {
      var lineStyle = {
        backgroundColor: this.props.color
      };
      return (
        <li className="line" style={lineStyle}>
          {this.props.date} | {this.props.user} : {this.props.message}
        </li>
      )
    }
  })
  var ChatView = React.createClass({
        render: function() {
          var chatNodes = this.props.data.map(function(row){
            var date = new Date(row.date).toString().split('GMT');
            return (
              <ChatLine date={date[0]} user={row.user} message={row.message} color={row.color} key={row.id}/>
            )
          })
          return (
            <ul className="chatView chat-window list-group" id="msgs">
              {chatNodes}
            </ul>
          );
        }
      });

  var ChatForm = React.createClass({
    getInitialState: function() {
      return {data:'', message: ''};
    },
    handleMessageChange: function(e) {
      this.setState({message: e.target.value});
    },
    handleSubmit: function(e) {
      var messages = this.state.data;
      console.log("handleSubmit")
      e.preventDefault();
      var message = this.state.message.trim();
      if (!message) {return;}
      console.log(message)
      var user = "<%= @user %>"
      var data = {date: Date(), user: user, message: message, color: "<%= @user_color %>"}
      // this.setState({data: this.state.data.concat([data])});

      // var newMessages = messages.push(data);
      // this.setState({data: newMessages});

      this.props.onMessageSubmit(data)
      console.log('STATUS=> triggering sockets...')
      ws.send([data.date,data.user,data.message,data.color].join(','));
      this.setState({message: ''});
      autoScroll();
    },
    render: function(){
      return (
        <form className="chatForm" onSubmit={this.handleSubmit}>
          <label>MESSAGE: </label>
          <input
            type="text"
            placeholder="write a message"
            value={this.state.message}
            onChange={this.handleMessageChange}
          />
          <input className="btn btn-sm btn-primary" type="submit" method="post" />
        </form>
      )
    }
  })
  var ChatViewHold = React.createClass({
    componentWillMount: function(){
      $.ajax({
        url: '/messages/websockets',
        dataType: 'json',
      }).done(function(data){
        this.setState({data: data});
        data = data[data.length-1]
        ws.send([data.date,data.user,data.message,data.color].join(','));
        autoScroll();
      }.bind(this))


    },
    getInitialState: function() {
      return {data: []};
    },
    handleDataUpdate: function(d) {
      this.setState({data: this.state.data.concat(d)});
    },
    render: function(){
      return (
        <div>
        <div id="msgs">Socket Status: hasnt been filled yet</div>
        <h3>Hello <strong>{this.props.user}</strong>! Welcome to Websockets.</h3>
        <ChatView data={this.state.data}/>
        <ChatForm onMessageSubmit={this.handleDataUpdate}/>
        </div>
      )
    }
  })
  ReactDOM.render(<ChatViewHold user={'<%= @user %>'} url={'/messages/websockets'}/>,document.getElementById('content'));
</script>
